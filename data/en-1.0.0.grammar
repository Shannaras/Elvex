T → S vtense {
  ↓2 = ↑ ∪ ⇓1;
  ↓1 = ↑;
}

/* **************************************************
 * Sentence arguments
 ************************************************** */
S → S {
  [i:$i, ii:NIL, $REST];
  ↓1 = [SUBJECT:$i, $REST];
}

S → S {
  [i:$i, ii:$ii, $REST];
  ↓1 = [SUBJECT:$i, OBJECT:$ii, iiReal:OBJECT, $REST];
}

S → S {
  [i:$i, ii:$ii, $REST];
  ↓1 = [SUBJECT:$i, PRED_ADJ:$ii, iiReal:PRED_ADJ, $REST];
}

S → S {
  [i:$i, ii:$ii, $REST];
  ↓1 = [SUBJECT:$i, $OBJ_THETA:[pcase:$pcase, $ii], iiReal:$OBJ_THETA, ii_pcase:$pcase, $REST];
}

S → S {
  [i:$i, ii:$ii, iii:$iii, $REST];
  ↓1 = [SUBJECT:$i, OBJECT:$ii, iiReal:OBJECT, iiiReal:$OBJ_THETA, iii_pcase:$pcase, $OBJ_THETA:[pcase:$pcase, $iii], $REST];
}

/* **************************************************
 * Affirmative Sentence
 ************************************************** */
S → NP|cln VP strongPunct {
  [SUBJECT:$SUBJECT, vtense:$vtense, $REST];
  [verbal_constr:$verbal_constr] ⊂ ↑;
  ↓1 = $SUBJECT ∪ [_case:nominative];
  $Synth_Subject = ⇓1;

  // not Interrogative form
  attest ((¬ $verbal_constr) ∨ ($verbal_constr != int));
  ↓2 = [SUBJECT:$Synth_Subject, vtense:$vtense, $REST];
  [SUBJECT:$expected_subject] ⊂ ⇓2;
  attest $Synth_Subject ∪ $expected_subject;
  ↓3 = [form:dot];
}

/* **************************************************
 * Interrogative Sentence
 ************************************************** */
S → aux NP|cln VP strongPunct {
  [SUBJECT:$SUBJECT, vtense:$vtense, $REST];
  [verbal_constr:$verbal_constr] ⊂ ↑;
  ↓2 = $SUBJECT ∪ [_case:nominative];
  $Synth_Subject = ⇓2;

  // Interrogative form
  attest ((¬ $verbal_constr) ∨ ($verbal_constr == int));
  ↓1 = ↑ ∪ [SUBJECT:$Synth_Subject];
  [verbal_constr:$synth_verbal_constr, verb_vform:$verb_vform] ⊂ ⇓1;
  ↓3 = $REST ∪ [vtense:$verb_vform];
  
  ↓4 = [form:int];

}

/* **************************************************
 * Noun phrase
 ************************************************** */
NP → det N {
  ↓1 = ↑ ∪ ⇓2;
  ↓2 = ↑;
  ⇑ = ⇓2;
}

NP → proper_noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

NP → pro {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

N → common_noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

N → noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

/* **************************************************
 * Verb and its complements
 ************************************************** */
VP → VN [NP] [NP] [AP] [PP] [SCOMP|VCOMP] {
  // Given Arguments
  [OBJECT:$OBJECT, OBLIQUE:$OBLIQUE, OBJ_THETA:$OBJ_THETA, PRED_ADJ:$PRED_ADJ, SCOMP:$SCOMP, VCOMP:$VCOMP, lexical_function:$lexical_function, $REST] ⊂ ↑;
  // Idiomatic Arguments
  //  [OBJECT:$Synth_OBJECT, OBLIQUE:$Synth_OBLIQUE, OBJ_THETA:$Synth_OBJ_THETA, PRED_ADJ:$Synth_PRED_ADJ, SCOMP:$Synth_SCOMP, VCOMP:$Synth_VCOMP] ⊂ ⇓1;
  [PRED_ADJ:$Synth_PRED_ADJ] ⊂ ⇓1;
  ↓1 = $REST;
  if (#2) 
    ↓2 = [_case:accusative, lexical_function:$lexical_function, $OBJECT];
  else 
    attest (¬ $OBJECT);
  if (#3)
    ↓3 = [lexical_function:$lexical_function, $OBLIQUE];
  else
    attest (¬ $OBLIQUE);
  if (#4) {
     if ($Synth_PRED_ADJ)
          $PRED_ADJ = $PRED_ADJ ∪ $Synth_PRED_ADJ; 
    ↓4 = [lexical_function:$lexical_function, $PRED_ADJ];
  }
  else {
    attest ((¬ $PRED_ADJ) ∧ (¬ $Synth_PRED_ADJ));
  }
  if (#5)
    ↓5 = [lexical_function:$lexical_function, $OBJ_THETA];
  else
    attest (¬ $OBJ_THETA);
  if (#6.1)
    ↓6 = [lexical_function:$lexical_function, $SCOMP];
  else if (#6.2)
    ↓6 = [lexical_function:$lexical_function, $VCOMP];
  else
    attest ((¬ $SCOMP) ∧ (¬ $VCOMP));
  ⇑ = ⇓1;
}

/* **************************************************
 * Verb 
 ************************************************** */
VN → VERB {
  [OBJECT:NIL, OBLIQUE:NIL, OBJ_THETA:NIL, PRED_ADJ:NIL, SCOMP:NIL, VCOMP:NIL, $REST];
  ↓1 = $REST;
  ⇑ = ⇓1;
}

/* **************************************************
 * Simple Verb 
 ************************************************** */
// he feels good
VERB → verb {
  [verbal_constr:$verbal_constr] ⊂ ↑;
  ↓1 = ↑ ∪ [vtense:present];
  attest  ((¬ $verbal_constr) ∨ ($verbal_constr != neg));
  ⇑ = ⇓1;
}

// he doesn't feel good
VERB → aux [not] verb {
  ↓1 = ↑;
  [verbal_constr:$verbal_constr] ⊂ ↑;
  attest ((¬ $verbal_constr) ∨ ($verbal_constr == int|neg));
  [vtense:_, $rest] ⊂ ↑;
  [verbal_constr:$verbal_constr, verb_vform:$verb_vform] ⊂ ⇓1;
  if (#2) {
    attest   ((¬ $verbal_constr) ∨ ($verbal_constr == neg));
    ↓2 = [];
  } else {
    attest  ((¬ $verbal_constr) ∨ ($verbal_constr != neg));
  }
  ↓3 = $rest ∪ [vtense:$verb_vform];
  ⇑ = ⇓3;
}

// VERB → [not] verb {
//   [verbal_constr:$verbal_constr] ⊂ ↑;
//   ↓2 = ↑;// ∪ [vtense:infinitive|present_participle|past_participle|present|preterite];
//   [verbal_constr:$synth_verbal_constr] ⊂ ⇓2;
//   if (#1) {
//     attest   ((¬ $verbal_constr) ∨ ($verbal_constr == neg));
//     ↓1 = [];
//   } else {
//     attest  ((¬ $verbal_constr) ∨ ($verbal_constr != neg));
//   }
//   ⇑ = ⇓2;
// }

// /* **************************************************
//  * Verb with an auxiliary 
//  ************************************************** */
// VERB → aux [not] verb {
//   ↓1 = ↑;// ∪ [vtense:present|preterite|present_continuous|present_perfect|future|past_continous|past_perfect];
//   [vtense:_, $rest] ⊂ ↑;
//   [verbal_constr:$verbal_constr, verb_vform:$verb_vform] ⊂ ⇓1;
//   if (#2) {
//     attest ($verbal_constr == neg);
//     ↓2 = [];
//     [neg:true];
//   } else {
//     attest ($verbal_constr == none);
//     [neg:false] ⊂ ↑;
//   }
//   ↓3 = $rest ∪ [vtense:$verb_vform];
//   ⇑ = ⇓3;
// }

// /* **************************************************
//  * Verb with two auxiliaries
//  ************************************************** */
// VERB → aux [not] have|be|been verb {
//   ↓1 = ↑ ∪ [vtense:future_perfect|future_continuous|present_perfect_continuous|past_perfect_continuous];
//   [vtense:_, verbal_constr:$verbal_constr, $rest] ⊂ ↑;
//   [aux_form:$aux_form, verb_vform:$verb_vform] ⊂ ⇓1;
//   if (#2) {
//     attest ($verbal_constr == neg);
//     ↓2 = [];
//     [neg:true];
//   } else {
//     attest ($verbal_constr == int|none);
//     [neg:false] ⊂ ↑;
//   }
//   ↓3 = [form:$aux_form];
//   ↓4 = $rest ∪ [vtense:$verb_vform];
//   ⇑ = ⇓4;
// }

// /* **************************************************
//  * Verb with three auxiliaries
//  ************************************************** */
// VERB → aux [not] have been verb {
//   ↓1 = ↑ ∪ [vtense:future_perfect_continuous];
//   [vtense:_, $rest] ⊂ ↑;
//   [aux_form:$aux_form, aux2_form:$aux2_form, verb_vform:$verb_vform] ⊂ ⇓1;
//   if (#2) {
//     attest ($verbal_constr == neg);
//     ↓2 = [];
//     [neg:true];
//   } else {
//     attest ($verbal_constr == int|none);
//     [neg:false] ⊂ ↑;
//   }
//   ↓3 = [form:$aux_form];
//   ↓4 = [form:$aux2_form];
//   ↓5 = $rest ∪ [vtense:$verb_vform];
//   ⇑ = ⇓5;
// }

/* **************************************************
 * Adjective phrase
 ************************************************** */
AP → [adv] adj {
  ↓2 = ↑;
  [MOD:$Synth_MOD] ⊂ ⇓2;
  if (#1) {
    attest $Synth_MOD;
    ↓1 = $Synth_MOD;
  }  else {
    attest (¬ $Synth_MOD);
  }
  ⇑ = ⇓2;
}
